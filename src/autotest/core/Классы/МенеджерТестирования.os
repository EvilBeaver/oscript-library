///////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль использует функционал gitsync 
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////////////////////////////////

#Использовать gitsync
#Использовать logos
#Использовать tempfiles
#Использовать strings

Перем Лог;

Перем ВерсияПлатформы;
Перем ЛокальныйКаталогГит Экспорт;
Перем URLРепозитория;
Перем ИмяВетки;
Перем КаталогИсходников Экспорт;
Перем ФайлХранилища;

Перем ОбщийМассивТестов; 		// содержит коллекцию тестов

Перем Конфигуратор Экспорт; 	// подключение к тестируемой базе
Перем ФайлВерсии;			// тестируемая версия конфигурации

///////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ФУНКЦИОНАЛ
///////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьРаспаковщик()

	Возврат Новый МенеджерСинхронизации();
	
КонецФункции

Функция ПолучитьПутьКБазеДанныхХранилища(Знач ПутьКХранилищу)

	ФайлПутиКХранилищу = Новый Файл(ПутьКХранилищу);
	Если ФайлПутиКХранилищу.Существует() И ФайлПутиКХранилищу.ЭтоКаталог() Тогда
	
		ФайлБазыДанныхХранилища = ОбъединитьПути(ФайлПутиКХранилищу.ПолноеИмя, "1cv8ddb.1CD");
		
	ИначеЕсли ФайлПутиКХранилищу.Существует() Тогда
	
		ФайлБазыДанныхХранилища = ФайлПутиКХранилищу.ПолноеИмя;
		
	Иначе
		
		ВызватьИсключение "Некорректный путь к хранилищу: " + ФайлПутиКХранилищу.ПолноеИмя;
		
	КонецЕсли;
	
	Возврат ФайлБазыДанныхХранилища;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////

Процедура СоздатьТестируемуюБазуДанных(Знач ВерсияХранилища = Неопределено)Экспорт

	Если ВерсияХранилища = Неопределено Тогда 
		
		Лог.Отладка("Получение данных Git");
		ВерсияХранилища = ПолучитьАктуальнуюВерсиюИзGit();	
		Лог.Отладка("Версия для тестирования = " + ВерсияХранилища);
		
	КонецЕсли;
	
	Лог.Отладка("Создание тестируемой базы данных");
	Конфигуратор = РазвернутьТестируемуюБазуИСохранитьПодключение(ВерсияХранилища);
	
КонецПроцедуры

Функция РаспаковатьЛокальноеХранилище(Формат, ВерсияПлатформыРаспаковки) Экспорт
	
	Распаковщик = ПолучитьРаспаковщик();
	Распаковщик.ВерсияПлатформы = ВерсияПлатформыРаспаковки;
	Возврат Распаковщик.РаспаковатьПоследнююВерсиюХранилища(
		КаталогИсходников, 
		ФайлХранилища, 
		Формат);
	
КонецФункции

Функция ПолучитьАктуальнуюВерсиюИзGit()

	Распаковщик = ПолучитьРаспаковщик();
	Распаковщик.ВерсияПлатформы = ВерсияПлатформы;
	
	Лог.Отладка("Получение изменений с удаленного узла (pull)");
	КодВозврата = Распаковщик.ВыполнитьGitPull(ЛокальныйКаталогГит, URLРепозитория, ИмяВетки);
	Если КодВозврата <> 0 Тогда
	
		ВызватьИсключение "Не удалось получить изменения с удаленного узла (код: " + КодВозврата + ")";
		
	КонецЕсли;
	
	Лог.Отладка("Определение версии для тестирования Git");
	ПутьКФайлуВерсий = ОбъединитьПути(КаталогИсходников, Распаковщик.ИмяФайлаВерсииХранилища());
	Возврат Распаковщик.ПрочитатьФайлВерсийГит(ПутьКФайлуВерсий);

КонецФункции

Функция РазвернутьТестируемуюБазуИСохранитьПодключение(ВерсияХранилища)

	ВремКаталог = ВременныеФайлы.СоздатьКаталог();
	
	Распаковщик = ПолучитьРаспаковщик();
	Распаковщик.ВерсияПлатформы = ВерсияПлатформы;
	
	ФайлВерсии = Распаковщик.ИмяФайлаВыгрузкиВерсииХранилища(ВремКаталог, ВерсияХранилища);
	
	Распаковщик.ПоНомеруВерсииСохранитьКонфигурациюСредствамиTool1CD(ФайлХранилища, ФайлВерсии, ВерсияХранилища);
	Возврат Распаковщик.СоздатьБазуДанныхИЗагрузитьКонфигурацию(ФайлВерсии, Истина);	

КонецФункции

Процедура ВыполнитьПервоначальнуюНастройку() Экспорт

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска[0] = "ENTERPRISE";
	ПараметрыЗапуска.Добавить("/C");
	ПараметрыЗапуска.Добавить("""autotest_init""");
	
	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Конфигуратор.УстановитьКонтекст(ПараметрыЗапуска[1], "autotest", "");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////

Функция ВыполнитьВсеТесты(МенеджерТестирования) Экспорт

	АвтотестПровален = Ложь;
	СтатусВыполненияТеста = СтатусТеста.Успешно;
	АргументыТестов = Новый Массив;
	АргументыТестов.Добавить(МенеджерТестирования);
	
	НомерТеста = 0;
	КоличествоТестов = ОбщийМассивТестов.Количество();
	Пока НомерТеста < КоличествоТестов Цикл
	
		Лог.Отладка("НомерТеста=" + (НомерТеста + 1) + " из КоличествоТестов=" + (КоличествоТестов));		
		
		Тест = ОбщийМассивТестов[НомерТеста];
		НомерТестКейса = 0;
		КоличествоТестКейсов = Тест.ТестКейсы.Количество();
		Пока НомерТестКейса < КоличествоТестКейсов Цикл
		
			ТестКейс = Тест.ТестКейсы[НомерТестКейса];
			Если ТестКейс.Статус <> "pending"
					И ТестКейс.Статус <> "skipped" Тогда
			
				Если НЕ ПустаяСтрока(ТестКейс.ОписаниеОшибки) Тогда
				
					Если НРег(ТестКейс.Важность) = "низкая" Тогда // предупреждение
					
						Если НЕ АвтотестПровален Тогда
							
							СтатусВыполненияТеста = СтатусТеста.Предупреждение;
							
						КонецЕсли;
						
					Иначе
					
						АвтотестПровален = Истина;
						СтатусВыполненияТеста = СтатусТеста.Ошибка;
						
					КонецЕсли;
					
				КонецЕсли;
				
				НомерТестКейса = НомерТестКейса + 1;
				КоличествоТестКейсов = Тест.ТестКейсы.Количество();
				Продолжить;
				
			КонецЕсли;
		
			ТестКейс.ВремяНачала = ТекущаяДата();
			ТестПровален = Ложь;
			Для Каждого ШагТестКейса Из ТестКейс.Шаги Цикл
			
				Если НЕ ТестПровален Тогда
				
					ШагТестКейса.ВремяНачала = ТекущаяДата();
					Попытка
						
						Если ШагТестКейса.Объект = Неопределено Тогда
							
							ВызватьИсключение "Не указан объект тестируемого класса"
							
						ИначеЕсли ПустаяСтрока(ШагТестКейса.Метод) Тогда
						
							ВызватьИсключение "Не указан метод объект тестируемого класса"
							
						Иначе
							
							Рефлектор = Новый Рефлектор;
							Если НЕ Рефлектор.МетодСуществует(ШагТестКейса.Объект, ШагТестКейса.Метод) Тогда
							
								ВызватьИсключение "Метод '" + ШагТестКейса.Метод + "' у объекта тестируемого класса не обнаружен";
								
							Иначе
							
								Если Тест.ВложенныеОбъекты Тогда
								
									АргументыТестовРасш = Новый Массив;
									АргументыТестовРасш.Добавить(МенеджерТестирования);
									АргументыТестовРасш.Добавить(ШагТестКейса.Объект);
									АргументыТестовРасш.Добавить(Тест);
								
									ОписаниеОшибки = Рефлектор.ВызватьМетод(ШагТестКейса.Объект, ШагТестКейса.Метод, АргументыТестовРасш);
									
								Иначе
									
									ОписаниеОшибки = Рефлектор.ВызватьМетод(ШагТестКейса.Объект, ШагТестКейса.Метод, АргументыТестов);
									
								КонецЕсли;							
								
							КонецЕсли;
							
						КонецЕсли;
						
					Исключение
					
						ОписаниеОшибки = ОписаниеОшибки();
					
					КонецПопытки;
					
					ШагТестКейса.ВремяОкончания = ТекущаяДата();
					
					Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда 
				
						ТестКейс.ОписаниеОшибки = ОписаниеОшибки;
						ТестПровален = Истина;
						
						Если НРег(ТестКейс.Важность) = "низкая" Тогда // предупреждение
					
							Если НЕ АвтотестПровален Тогда
								
								СтатусВыполненияТеста = СтатусТеста.Предупреждение;
								
							КонецЕсли;
							
						Иначе
						
							АвтотестПровален = Истина;
							СтатусВыполненияТеста = СтатусТеста.Ошибка;
							
						КонецЕсли;
						
					КонецЕсли;
			
					Если ТестПровален Тогда
					
						ШагТестКейса.Статус = "провалено";
					
					ИначеЕсли Тест.ВложенныеОбъекты Тогда
					
						ШагТестКейса.Статус = "служебный"; // такие будут пропускаться
					
					Иначе				
						
						ШагТестКейса.Статус = "успешно";
						
					КонецЕсли;	

				Иначе
				
					ШагТестКейса.Статус = "отменено";
					
				КонецЕсли;
				
				НомерТестКейса = НомерТестКейса + 1;
				КоличествоТестКейсов = Тест.ТестКейсы.Количество();
				
			КонецЦикла;
			
			ТестКейс.ВремяОкончания = ТекущаяДата();
			
			Если ТестПровален Тогда
				
				ТестКейс.Статус = "провалено";
				
			ИначеЕсли Тест.ВложенныеОбъекты Тогда
			
				ТестКейс.Статус = "служебный"; // такие будут пропускаться
				
			Иначе
				
				ТестКейс.Статус = "успешно";
					
			КонецЕсли;
		
		КонецЦикла;
	
		НомерТеста = НомерТеста + 1;
		КоличествоТестов = ОбщийМассивТестов.Количество(); // динамическая подгрузка тестов
	
	КонецЦикла;
	
	Возврат СтатусВыполненияТеста;

КонецФункции

Процедура ЗагрузитьТестыИзКаталога(МенеджерТестирования, КаталогТестов)Экспорт

	МассивФайлов = НайтиФайлы(КаталогТестов, "*.os");
	Для Каждого Файл Из МассивФайлов Цикл
		
		Попытка 
		
			Объект = ЗагрузитьСценарий(Файл.ПолноеИмя);
			
		Исключение
		
			Лог.Ошибка("Ошибка загрузки сценария '" + Файл.ПолноеИмя + "': " + ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;

		Рефлектор = Новый Рефлектор;
		Если НЕ Рефлектор.МетодСуществует(Объект, "ЗагрузитьТесты") Тогда
		
			Лог.Ошибка("Ошибка загрузки сценария '" + Файл.ПолноеИмя + "': Отсутствует метод 'ЗагрузитьТесты'");
			Продолжить;
			
		КонецЕсли;
		
		Попытка
		
			Аргументы = Новый Массив;
			Аргументы.Добавить(Объект);
			Аргументы.Добавить(МенеджерТестирования);
			Рефлектор.ВызватьМетод(Объект, "ЗагрузитьТесты", Аргументы);
		
		Исключение
		
			Лог.Ошибка("Ошибка загрузки сценария '" + Файл.ПолноеИмя + "': Ошибка вызова метода 'ЗагрузитьТесты': " + ОписаниеОшибки());
			Продолжить;
		
		КонецПопытки;		
		
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьФайлыОтчетов(КаталогОтчетов, ВHTML = ЛОЖЬ)Экспорт

	Если Не (Новый Файл(КаталогОтчетов).Существует()) Тогда
	
		СоздатьКаталог(КаталогОтчетов);
		
	Иначе
	
		МассивФайлов = НайтиФайлы(КаталогОтчетов, ПолучитьМаскуВсеФайлы());
		УдалитьФайлы(КаталогОтчетов, "*");		
		
	КонецЕсли;
	
	Ит = 1;
	МенеджерОтчетов = Новый ОтчетыТестирования;
	Для Каждого Тест Из ОбщийМассивТестов Цикл
	
		Если ВHTML Тогда
			
			ИмяОтчета = ОбъединитьПути(КаталогОтчетов, Формат(Ит, "ЧГ=0") + "-testsuite.html");
			МенеджерОтчетов.СформироватьФайлОтчетаHTML(Тест.Наименование, Тест.Описание, Тест.ТестКейсы, Тест.Важность, ИмяОтчета);
			
		Иначе
				
			ИмяОтчета = ОбъединитьПути(КаталогОтчетов, Формат(Ит, "ЧГ=0") + "-testsuite.xml");
			МенеджерОтчетов.СформироватьФайлОтчета(Тест.Наименование, Тест.Описание, Тест.ТестКейсы, Тест.Важность, ИмяОтчета);
			
		КонецЕсли;		
		Ит = Ит + 1;
		
	КонецЦикла;

КонецПроцедуры

Функция СохранитьУспешнуюСборку(ПутьККаталогуСборок, НомерСборки = 0)Экспорт

	ФайлКонфигурации = ОбъединитьПути(КаталогИсходников, "Configuration.xml");
	
	ИмяКонфигурации = "";
	ВерсияКонфигурации = "";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлКонфигурации);
	Пока ЧтениеXML.Прочитать() Цикл
	
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Properties" Тогда
		
			Пока ЧтениеXML.Прочитать() Цикл
			
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Name" Тогда
				
					ЧтениеXML.Прочитать();
					ИмяКонфигурации = ЧтениеXML.Значение;
					
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Version" Тогда
					
					ЧтениеXML.Прочитать();
					ВерсияКонфигурации = СтрЗаменить(ЧтениеXML.Значение, ":", "_");
					Прервать;
				
				КонецЕсли;
				
			КонецЦикла;
			
			Прервать;
		
		КонецЕсли;
	
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	АдресСохранения = ОбъединитьПути(ПутьККаталогуСборок, ИмяКонфигурации + " " + ВерсияКонфигурации + "." + НомерСборки + ".cf");
	КопироватьФайл(ФайлВерсии, АдресСохранения);

	Возврат АдресСохранения;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////

Процедура Инициализация(Знач вхВерсияПлатформы, Знач вхПутьКХранилищу, Знач вхЛокальныйКаталогГит, Знач вхURLРепозитория, Знач вхИмяВетки, Знач вхКаталогИсходников = Неопределено)Экспорт

	ВерсияПлатформы = вхВерсияПлатформы;
	ЛокальныйКаталогГит = вхЛокальныйКаталогГит;
	URLРепозитория = вхURLРепозитория;
	ИмяВетки = вхИмяВетки;
	Если вхКаталогИсходников = Неопределено Тогда
	
		КаталогИсходников = ОбъединитьПути(ЛокальныйКаталогГит, "src\configuration\");
		
	Иначе
			
		КаталогИсходников = вхКаталогИсходников;
		
	КонецЕсли;
	
	ФайлХранилища = ПолучитьПутьКБазеДанныхХранилища(вхПутьКХранилищу);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// Объектная модель теста 
///////////////////////////////////////////////////////////////////////////////////////////////

Функция СоздатьОписаниеТеста(Наименование, Описание, ВложенныеОбъекты = Ложь, Важность = "нормальная") Экспорт
	
	НовыйТест = ПолучитьОписаниеТеста();
	НовыйТест.Наименование = Наименование;
	НовыйТест.Описание = Описание;
	НовыйТест.ВложенныеОбъекты = ВложенныеОбъекты;
	НовыйТест.Важность = Важность;
	
	ОбщийМассивТестов.Добавить(НовыйТест);
	
	Возврат НовыйТест;
	
КонецФункции

Функция ДобавитьТестКейс(Тест, Наименование, Важность = "нормальная")Экспорт
	
	НовыйТестКейс = ПолучитьОписаниеТестКейса();
	НовыйТестКейс.Наименование = Наименование;
	НовыйТестКейс.Важность = Важность;
	
	Тест.ТестКейсы.Добавить(НовыйТестКейс);
	
	Возврат НовыйТестКейс;
	
КонецФункции

Функция ДобавитьШагТестКейса(ТестКейс, Наименование, Объект = Неопределено, ИмяМетода = "")Экспорт
	
	НовыйШагТестКейса = ПолучитьОписаниеШагаТестКейса();
	НовыйШагТестКейса.Наименование = Наименование;
	НовыйШагТестКейса.Объект = Объект;
	НовыйШагТестКейса.Метод = ИмяМетода;
	
	ТестКейс.Шаги.Добавить(НовыйШагТестКейса);
	
	Возврат НовыйШагТестКейса;
	
КонецФункции

Функция ПолучитьОписаниеТеста()

	ОписаниеТеста = Новый Структура("Наименование, Описание, ВложенныеОбъекты, Важность", "", "", Ложь, "нормальная");
	ОписаниеТеста.Вставить("ТестКейсы", Новый Массив);
	Возврат ОписаниеТеста;

КонецФункции

Функция ПолучитьОписаниеТестКейса()

	ОписаниеТестКейса = Новый Структура("Наименование, ВремяНачала, ВремяОкончания, ОписаниеОшибки, Статус, Важность", "", Дата(1, 1, 1), Дата(1, 1, 1), "", "pending", "нормальная");
	ОписаниеТестКейса.Вставить("Шаги", Новый Массив);
	Возврат ОписаниеТестКейса;

КонецФункции

Функция ПолучитьОписаниеШагаТестКейса()

	ОписаниеШагаТестКейса = Новый Структура("Наименование, ВремяНачала, ВремяОкончания, Статус", "", Дата(1, 1, 1), Дата(1, 1, 1), "pending");
	ОписаниеШагаТестКейса.Вставить("Объект", Неопределено);	
	ОписаниеШагаТестКейса.Вставить("Метод", "");	
	Возврат ОписаниеШагаТестКейса;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////

ОбщийМассивТестов = Новый Массив;
Конфигуратор = Неопределено;

Лог = Логирование.ПолучитьЛог("oscript.app.autotest");
