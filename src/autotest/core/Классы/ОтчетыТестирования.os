///////////////////////////////////////////////////////////////////////////////////////////////
//
// Создает файлы отчетов
//	- в формате YandexAllure (Модуль использует наработки формирования отчета проекта Vanessa-Stack)
//	- в формате HTML
// 
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////////////////////////////////

#Использовать tempfiles

///////////////////////////////////////////////////////////////////////////////////////////////
// Формирование текста отчета
///////////////////////////////////////////////////////////////////////////////////////////////

Функция СформироватьФайлОтчета(ИмяОтчета, ОписаниеОтчета, ТестКейсы, Важность = "Нормальная", ИмяФайла = "") Экспорт

	ВременныйФайл = ВременныеФайлы.СоздатьФайл("xml");
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
	
		ИмяФайла = ВременныеФайлы.СоздатьФайл("xml");
		
	КонецЕсли;

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ВременныйФайл);
	// заголовок отчета
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("test-suite", "");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("", "urn:model.allure.qatools.yandex.ru");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
			ЗаписьXML.ЗаписатьТекст(ОбработатьСтроку(ОписаниеОтчета));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// запись тест-кейсов
		ЗаписьXML.ЗаписатьНачалоЭлемента("test-cases");
		
		Для Каждого ТестКейс Из ТестКейсы Цикл
		
			Если ТестКейс.Статус = "служебный" Тогда
				Продолжить;
			КонецЕсли;			
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("test-case");
				ЗаписьXML.ЗаписатьАтрибут("start", ДатаВLong(ТестКейс.ВремяНачала));
				ЗаписьXML.ЗаписатьАтрибут("stop", ДатаВLong(ТестКейс.ВремяОкончания));
				
				ЗаписьXML.ЗаписатьАтрибут("status", СкорректироватьСтатус(ТестКейс.Статус));
			
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
					ЗаписьXML.ЗаписатьТекст(ОбработатьСтроку(ТестКейс.Наименование));
				ЗаписьXML.ЗаписатьКонецЭлемента();
					
				// запись сообщения об ошибке
				Если ЭтоСтатусОшибки(ТестКейс.Статус) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
						ЗаписьXML.ЗаписатьНачалоЭлемента("message");
							ЗаписьXML.ЗаписатьТекст(ТестКейс.ОписаниеОшибки);
						ЗаписьXML.ЗаписатьКонецЭлемента();
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
				
				// шаги сценария
				ЗаписьXML.ЗаписатьНачалоЭлемента("steps");
			
				Для Каждого ШагТестКейса Из ТестКейс.Шаги Цикл
				
					ЗаписьXML.ЗаписатьНачалоЭлемента("step");					
						ЗаписьXML.ЗаписатьАтрибут("start", ДатаВLong(ШагТестКейса.ВремяНачала));
						ЗаписьXML.ЗаписатьАтрибут("stop", ДатаВLong(ШагТестКейса.ВремяОкончания));
						ЗаписьXML.ЗаписатьАтрибут("status", СкорректироватьСтатус(ШагТестКейса.Статус));
				
						ЗаписьXML.ЗаписатьНачалоЭлемента("name");
							ЗаписьXML.ЗаписатьТекст(ОбработатьСтроку(ШагТестКейса.Наименование));
						ЗаписьXML.ЗаписатьКонецЭлемента();										
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
				КонецЦикла;
			
			// конец шагов
			ЗаписьXML.ЗаписатьКонецЭлемента();

			// метка
			ЗаписьXML.ЗаписатьНачалоЭлемента("labels");
				ЗаписьXML.ЗаписатьНачалоЭлемента("label");
					ЗаписьXML.ЗаписатьАтрибут("name", "story");
					ЗаписьXML.ЗаписатьАтрибут("value", ОбработатьСтроку(ТестКейс.Наименование));	
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("label");
					ЗаписьXML.ЗаписатьАтрибут("name", "severity");
					ЗаписьXML.ЗаписатьАтрибут("value", ВажностьAllure(ТестКейс.Важность));
				ЗаписьXML.ЗаписатьКонецЭлемента();				
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// конец тест-кейса
			ЗаписьXML.ЗаписатьКонецЭлемента();	
			
		КонецЦикла;
		
		// конец тест-кейсов
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// метки с подписями
		ЗаписьXML.ЗаписатьНачалоЭлемента("labels");
			ЗаписьXML.ЗаписатьНачалоЭлемента("label");
				ЗаписьXML.ЗаписатьАтрибут("name", "feature");
				ЗаписьXML.ЗаписатьАтрибут("value", ОбработатьСтроку(ИмяОтчета));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("label");
				ЗаписьXML.ЗаписатьАтрибут("name", "framework");
				ЗаписьXML.ЗаписатьАтрибут("value", "autotest");
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("label");
				ЗаписьXML.ЗаписатьАтрибут("name", "language");
				ЗаписьXML.ЗаписатьАтрибут("value", "oscript");
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("label");
				ЗаписьXML.ЗаписатьАтрибут("name", "severity");
				ЗаписьXML.ЗаписатьАтрибут("value", ВажностьAllure(Важность));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
			
	// завершение
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	ЗТ = Новый ЗаписьТекста();
	ЗТ.Открыть(ИмяФайла, КодировкаТекста.ANSI);
	ЗТ.Закрыть();
	
	ЗТ = Новый ЗаписьТекста();
	ЗТ.Открыть(ИмяФайла, "UTF-8",, Истина);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ВременныйФайл, "UTF-8");
			
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр, "<test-suite", "<ns2:test-suite");
		Стр = СтрЗаменить(Стр, "</test-suite>", "</ns2:test-suite>");
		Стр = СтрЗаменить(Стр, "xmlns=""urn:model.allure.qatools.yandex.ru""", "xmlns:ns2=""urn:model.allure.qatools.yandex.ru""");
		Стр = СтрЗаменить(Стр, "utf-8", "utf-8");		
				
		ЗТ.ЗаписатьСтроку(Стр);
		
	КонецЦикла;	
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

Функция СформироватьФайлОтчетаHTML(ИмяОтчета, ОписаниеОтчета, ТестКейсы, Важность = "Нормальная", ИмяФайла = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
	
		ИмяФайла = ВременныеФайлы.СоздатьФайл("html");
		
	КонецЕсли;

	ЗаписьHTML = Новый ЗаписьТекста(ИмяФайла);
	
	// заголовок отчета
	ЗаписьHTML.ЗаписатьСтроку("<html>
		|	<head>
		|		<style>
   		|			h1 {font-family: Geneva, Arial, Helvetica, sans-serif;font-size: 20} 
    	|			table {font-family: Geneva, Arial, Helvetica, sans-serif;font-size: 14}
    	|			th {background: lightgray;text-align: center;}
    	|			th.test {width: 200;}
    	|			th.time {width: 70;}
    	|			th.status {width: 50;}
    	|			th.error {width: 380;}
    	|			td {}
		|			td.time {text-align: center;}
    	|			td.status_passed {text-align: center;background: lightgreen}
    	|			td.status_pending {text-align: center;background: lightblue}
    	|			td.status_failed {text-align: center;background: red}
    	|			td.status_broken {text-align: center;background: orange}
    	|			td.status_canceled {width: 70;text-align: center;background: lightgray}
    	|			img {align: center;}
      	|		</style>
		|	</head>
		|	<body>");
	ЗаписьHTML.ЗаписатьСтроку("	<h1>Набор тестов: """ + ОписаниеОтчета + """<img src=""" + КартинкаВажности(Важность) + """ align=""center""/></h1>");
	
	// шапка ТЧ
	ЗаписьHTML.ЗаписатьСтроку("	<table width=""100%"" cellspacing=""0"" border=""1"" bordercolor=""black"">	
		|	<tbody>
		|		<tr>
		|			<th class=""test"" rowspan=""2"">Тест</th>
		|			<th class=""time""rowspan=""2"">Длительность (сек)</th>
		|			<th class=""status"" rowspan=""2"">Статус</th>
		|			<th class=""error"" rowspan=""2"">Описание ошибки</th>
		|			<th colspan=""3"">Сценарии теста</th>
		|		</tr>
		|		<tr>
		|			<th class=""test"">Сценарий</th>
		|			<th class=""time"">Длительность (сек)</th>
		|			<th class=""status"">Статус</th>		
		|		</tr>");

	Для Каждого ТестКейс Из ТестКейсы Цикл
		
		Если ТестКейс.Статус = "служебный" Тогда
			
			Продолжить;
			
		КонецЕсли;			
	
		КоличествоСценариев = Формат(ТестКейс.Шаги.Количество() + 1, "ЧГ=");
		ОписаниеОшибки = "&nbsp;";
		Если ЭтоСтатусОшибки(ТестКейс.Статус) Тогда
			
			ОписаниеОшибки = "<pre>" + ТестКейс.ОписаниеОшибки + "</pre>";
			
		КонецЕсли;		 
		
		ЗаписьHTML.ЗаписатьСтроку("		<tr>
		|			<td rowspan=""" + КоличествоСценариев + """><img src=""" + КартинкаВажности(ТестКейс.Важность) + """ align=""center""/>" + ТестКейс.Наименование + "</td>
		|			<td class=""time"" rowspan=""" + КоличествоСценариев + """>" + ((ДатаВLong(ТестКейс.ВремяОкончания) - ДатаВLong(ТестКейс.ВремяНачала)) / 1000) + "</td>
		|			<td class=""status_" + СкорректироватьСтатус(ТестКейс.Статус) + """ rowspan=""" + КоличествоСценариев + """>" + СкорректироватьСтатус(ТестКейс.Статус) + "</td>
		|			<td class=""error"" rowspan=""" + КоличествоСценариев + """>" + ОписаниеОшибки + "</td>
		|		</tr>");

		Для Каждого ШагТестКейса Из ТестКейс.Шаги Цикл
				
			ЗаписьHTML.ЗаписатьСтроку("		<tr>
			|			<td>" + ШагТестКейса.Наименование + "</td>
			|			<td class=""time"">" + ((ДатаВLong(ШагТестКейса.ВремяОкончания) - ДатаВLong(ШагТестКейса.ВремяНачала)) / 1000) + "</td>
			|			<td class=""status_" + СкорректироватьСтатус(ШагТестКейса.Статус) + """>" + СкорректироватьСтатус(ШагТестКейса.Статус) + "</td>			
			|		</tr>");

		КонецЦикла;
			
	КонецЦикла;
		
	ЗаписьHTML.ЗаписатьСтроку("</tbody></table></body></html>");	
	ЗаписьHTML.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ЭтоСтатусОшибки(Знач Статус)
	
	Статус = СтатусAllure(Статус);
	Возврат Статус = "failed";
	
КонецФункции

Функция ОбработатьСтроку(Знач ВходнаяСтрока)

	Возврат СтрЗаменить(ВходнаяСтрока, ".", "_");

КонецФункции

Функция СкорректироватьСтатус(Знач Статус)
	
	Статус = СтатусAllure(Статус);
	Если Статус = "skipped" Тогда
	
		Возврат "canceled";
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ВажностьAllure(Знач ИсходныйВажность)

	ИсходныйВажность = НРег(ИсходныйВажность);
	Важность = "normal";
	
	Если ИсходныйВажность = "blocker" ИЛИ ИсходныйВажность = "блокирующая" Тогда
		
		Важность = "blocker";	
		
	ИначеЕсли ИсходныйВажность = "critical" ИЛИ ИсходныйВажность = "критичная" Тогда
		
		Важность = "critical";
		
	ИначеЕсли ИсходныйВажность = "normal" ИЛИ ИсходныйВажность = "нормальная" Тогда			
		
		Важность = "normal";
		
	ИначеЕсли ИсходныйВажность = "minor" ИЛИ ИсходныйВажность = "средняя" Тогда			
		
		Важность = "minor";
		
	ИначеЕсли ИсходныйВажность = "trivial" ИЛИ ИсходныйВажность = "низкая" Тогда			
		
		Важность = "trivial";
		
	КонецЕсли;
	
	Возврат Важность;
	
КонецФункции

Функция ДатаВLong(ИсходнаяДата)

	Если ТипЗнч(ИсходнаяДата) = Тип("Дата") Тогда
	
		Возврат Окр((ИсходнаяДата - Дата(1, 1, 1)) * 1000);
		
	Иначе // уже число
	
		Возврат ИсходнаяДата;
	
	КонецЕсли;

КонецФункции

Функция СтатусAllure(Знач ИсходныйСтатус)
	
	ИсходныйСтатус = НРег(ИсходныйСтатус);
	Статус = "pending";
	
	Если ИсходныйСтатус = "passed" ИЛИ ИсходныйСтатус = "успешно" Тогда
		
		Статус = "passed";	
		
	ИначеЕсли ИсходныйСтатус = "pending" ИЛИ ИсходныйСтатус = "ожидание" Тогда
		
		Статус = "pending";
		
	ИначеЕсли ИсходныйСтатус = "failed" ИЛИ ИсходныйСтатус = "провалено" Тогда			
		
		Статус = "failed";
		
	ИначеЕсли ИсходныйСтатус = "broken" ИЛИ ИсходныйСтатус = "сломано" Тогда			
		
		Статус = "broken";
		
	ИначеЕсли ИсходныйСтатус = "skipped" ИЛИ ИсходныйСтатус = "пропущено" Тогда // DEPRECATED
		
		Статус = "skipped";
		
	ИначеЕсли ИсходныйСтатус = "canceled" ИЛИ ИсходныйСтатус = "отменено" Тогда			
		
		Статус = "canceled";
		
	КонецЕсли;
	
	Возврат Статус;
		
КонецФункции

Функция КартинкаВажности(Знач ИсходныйВажность)
	
	// ссылки на картинки не ставлял, т.к. не ясно с лицензией
	ИсходныйВажность = ВажностьAllure(ИсходныйВажность);
	Картинка = ""; 
	
	Если ИсходныйВажность = "blocker" Тогда
		
		Картинка = "";	
		
	ИначеЕсли ИсходныйВажность = "critical" Тогда
		
		Картинка = "";
		
	ИначеЕсли ИсходныйВажность = "normal" Тогда			
		
		Картинка = "";
		
	ИначеЕсли ИсходныйВажность = "minor" Тогда			
		
		Картинка = "";
		
	ИначеЕсли ИсходныйВажность = "trivial" Тогда			
		
		Картинка = "";
		
	КонецЕсли;
	
	Возврат Картинка;
		
КонецФункции
