///////////////////////////////////////////////////////////////////
//
// Выполняет автоматическое тестирование конфигурации, 
// по данным версии в Git. По результатам тестирования 
// формирует отчет в формате YandexAllure или HTML
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////

#Использовать tempfiles
#Использовать cmdline
#Использовать logos
#Использовать v8config
#Использовать messenger

#Использовать "core"

Перем Лог;

///////////////////////////////////////////////////////////////////
// Прикладные процедуры и функции
///////////////////////////////////////////////////////////////////

Функция РазобратьАргументыКоманднойСтроки()

	Если АргументыКоманднойСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Парсер = ИнициализироватьПарсерАргументов();
	
	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);

	Возврат Параметры;
	
КонецФункции

Функция ИнициализироватьПарсерАргументов()
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	ДобавитьКомандуТестирование(Парсер);
	ДобавитьКомандуСамоТестирование(Парсер);
	ДобавитьКомандуHelp(Парсер);
	ДобавитьАргументыПоУмолчанию(Парсер);
	
	Возврат Парсер;
	
КонецФункции

Процедура ДобавитьКомандуТестирование(Знач Парсер)
	
	Команда = Парсер.ОписаниеКоманды("autotest", "Выполняет автоматическое тестирование");
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ЛокальныйКаталогГит", "Файловый путь к локальному репозиторию GIT.");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "URLРепозитория", "Адрес удаленного репозитория GIT.");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогОтчетов", "Каталог сохранения отчетов (будет очищен).");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "АдресЗадачи", "URL задачи на тестирование.");
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "-debug", "<on|off>");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "-branch", "<имя ветки git>");
	
	Парсер.ДобавитьКоманду(Команда);
	
КонецПроцедуры

Процедура ДобавитьКомандуСамоТестирование(Знач Парсер)
	
	Команда = Парсер.ОписаниеКоманды("selftest", "Выполняет автоматическое тестирование на локальном стенде");
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ЛокальныйКаталогГит", "Файловый путь к локальному репозиторию GIT.");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ПутьКХранилищу", "Адрес локального хранилища.");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогОтчетов", "Каталог сохранения отчетов.");
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "-debug", "<on|off>");
	
	Парсер.ДобавитьКоманду(Команда);
	
КонецПроцедуры

Процедура ДобавитьКомандуHelp(Знач Парсер)
	
	Команда = Парсер.ОписаниеКоманды("help", "Вывести справку по параметрам команды");
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КомандаДляСправки");
	Парсер.ДобавитьКоманду(Команда);
	
КонецПроцедуры

Процедура ДобавитьАргументыПоУмолчанию(Знач Парсер)
	
	Парсер.ДобавитьПараметр("URLРепозитория", "Адрес удаленного репозитория GIT.");
	Парсер.ДобавитьПараметр("ЛокальныйКаталогГит", "Каталог исходников внутри локальной копии git.");
	Парсер.ДобавитьПараметр("КаталогОтчетов", "Каталог сохранения отчетов (будет очищен).");
	Парсер.ДобавитьПараметр("АдресЗадачи", "URL задачи на тестирование.");
	
	Парсер.ДобавитьИменованныйПараметр("-debug", "<on|off>");
	Парсер.ДобавитьИменованныйПараметр("-branch", "<имя ветки git>");
	   
КонецПроцедуры

Процедура ВыполнитьОбработку(Знач Параметры)

	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		
		УстановитьРежимОтладкиПриНеобходимости(Параметры.ЗначенияПараметров);
		ВыполнитьКоманду(Параметры);
		
	Иначе
	
		УстановитьРежимОтладкиПриНеобходимости(Параметры);
		Тестировать(Параметры);
			
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач ОписаниеКоманды)

	Если ОписаниеКоманды.ЗначенияПараметров["-debug"] = "on" Тогда
	
		Лог.УстановитьУровень(УровниЛога.Отладка);
		
	КонецЕсли;

	Если ОписаниеКоманды.Команда = "autotest" Тогда
	
		Тестировать(ОписаниеКоманды.ЗначенияПараметров);
		
	ИначеЕсли ОписаниеКоманды.Команда = "selftest" Тогда
	
		ТестироватьЛокально(ОписаниеКоманды.ЗначенияПараметров);
	
	ИначеЕсли ОписаниеКоманды.Команда = "help" Тогда
	
		ВывестиСправкуПоКомандам(ОписаниеКоманды.ЗначенияПараметров["КомандаДляСправки"]);
		
	Иначе
		
		ВызватьИсключение "Неизвестная команда: " + ОписаниеКоманды.Команда;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьРежимОтладкиПриНеобходимости(Знач Параметры)
	
	Если Параметры["-debug"] = "on" Тогда
	
		Лог.УстановитьУровень(УровниЛога.Отладка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьИнформациюОПараметрахКоманднойСтроки() 
	
	Парсер = ИнициализироватьПарсерАргументов();
	
	ВозможныеКоманды = Парсер.СправкаВозможныеКоманды();
	
	Сообщить("Автоматическое тестирование конфигурации из хранилища конфигураций 1С.");
	Сообщить("Использование: ");
	Сообщить("	autotest <git-url> <local-dir> [ключи]");
	Сообщить("	autotest <команда> <параметры команды> [ключи]");
	ВывестиПараметры(Парсер.СправкаПоПараметрам());
	
	Сообщить(Символы.ПС + "Возможные команды:");
	
	МаксШирина = 0;
	Поле = "               ";
	Для Каждого Команда Из ВозможныеКоманды Цикл
		ТекШирина = СтрДлина(Команда.Команда);
		Если ТекШирина > МаксШирина Тогда
			МаксШирина = ТекШирина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Команда Из ВозможныеКоманды Цикл
	
		Сообщить(" " + Лев(Команда.Команда + Поле, МаксШирина + 2) + "- " + Команда.Пояснение);
		
	КонецЦикла;
			
	Сообщить("Для подсказки по конкретной команде наберите autotest help <команда>");
	
КонецПроцедуры

Процедура ВывестиСправкуПоКомандам(Знач Команда) Экспорт
	
	Парсер = ИнициализироватьПарсерАргументов();
	
	ВозможныеКоманды = Парсер.СправкаВозможныеКоманды();
	ОписаниеКоманды = ВозможныеКоманды.Найти(Команда, "Команда");
	Если ОписаниеКоманды = Неопределено Тогда
		Сообщить("Команда отсуствует: " + Команда);
		Возврат;
	КонецЕсли;
	
	Сообщить("" + ОписаниеКоманды.Команда + " - " + ОписаниеКоманды.Пояснение);
	ВывестиПараметры(ОписаниеКоманды.Параметры);
	
КонецПроцедуры

Процедура ВывестиПараметры(Знач ОписаниеПараметров)
	
	Сообщить("Параметры:");
	Для Каждого СтрПараметр Из ОписаниеПараметров Цикл
		Если Не СтрПараметр.ЭтоИменованныйПараметр Тогда
			Сообщить(СтрШаблон(" <%1> - %2", СтрПараметр.Имя, СтрПараметр.Пояснение));
		Иначе
			Сообщить(СтрШаблон(" %1 - %2", СтрПараметр.Имя, СтрПараметр.Пояснение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Функционал тестирования
///////////////////////////////////////////////////////////////////

Процедура Тестировать(Знач ОписаниеПараметров)Экспорт

	Лог.Информация("Начинаю тестирование конфигурации из хранилища");
	
	ЛокальныйКаталогГит = ОписаниеПараметров["ЛокальныйКаталогГит"];	
	Если ЛокальныйКаталогГит = Неопределено Тогда
		
		ВызватьИсключение "Не указан локальный каталог Git.";
		
	КонецЕсли;
	
	URLРепозитория = ОписаниеПараметров["URLРепозитория"];
	Если URLРепозитория = Неопределено Тогда
		
		ВызватьИсключение "Не указан адрес расположения репозитория Git";
		
	КонецЕсли;
	
	КаталогОтчетов = ОписаниеПараметров["КаталогОтчетов"]; 
	Если ОписаниеПараметров["КаталогОтчетов"] = Неопределено Тогда
	
		ВызватьИсключение "Не указан каталог для сохранения отчетов";
	
	КонецЕсли;
	
	АдресЗадачи = ОписаниеПараметров["АдресЗадачи"]; 
	Если ОписаниеПараметров["АдресЗадачи"] = Неопределено Тогда
	
		ВызватьИсключение "Не указан url задачи на тестирование";
	
	КонецЕсли;
	
	СтруктураАдресаЗадачи = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(АдресЗадачи, "/");
	НомерСборки = СтруктураАдресаЗадачи[СтруктураАдресаЗадачи.Количество() - 2];
			
	ИмяВетки = "develop";
	Если ОписаниеПараметров["-branch"] <> Неопределено Тогда
	
		ИмяВетки = ОписаниеПараметров["-branch"]; 
		
	КонецЕсли; 
	
	КонфигураторРепозитория = Новый КонфигураторРепозитория;
	КонфигурацияРепозитория = КонфигураторРепозитория.ПрочитатьКонфигурацию(ЛокальныйКаталогГит);
	
	ПутьКХранилищу = КонфигурацияРепозитория["АдресХранилища"];
	ВерсияПлатформы = КонфигурацияРепозитория["Версия1СТестирование"];
	Ответственные = КонфигурацияРепозитория["Ответственный"];
	ПутьККаталогуСборок = КонфигурацияРепозитория["ПутьСохраненияСборок"];
	Если ПутьККаталогуСборок = Неопределено Тогда
		
		ПутьККаталогуСборок = "";
		
	КонецЕсли;	
	
	СохранятьУспешнуюСборку = Не ПустаяСтрока(ПутьККаталогуСборок);
	
	Лог.Отладка("Настройки тестирования --------------------------------");
	Лог.Отладка("ПутьКХранилищу = " + ПутьКХранилищу);
	Лог.Отладка("URLРепозитория = " + URLРепозитория);
	Лог.Отладка("КаталогОтчетов = " + КаталогОтчетов);
	Лог.Отладка("ЛокальныйКаталогГит = " + ЛокальныйКаталогГит);	
	Лог.Отладка("ИмяВетки = " + ИмяВетки);	
	Лог.Отладка("ПутьККаталогуСборок = " + ПутьККаталогуСборок);	
	Лог.Отладка("НомерСборки = " + НомерСборки);	
	Лог.Отладка("-------------------------------------------------------");
	
	МенеджерТестирования = ПолучитьМенеджерТестирования(ВерсияПлатформы, ПутьКХранилищу, ЛокальныйКаталогГит, URLРепозитория, ИмяВетки);
	
	// создание тестововой базы и ее инициализация убраны из публичного класса
	
	// загрузка внешних тестов
	МенеджерТестирования.ЗагрузитьТестыИзКаталога(МенеджерТестирования, ОбъединитьПути(ЛокальныйКаталогГит, "features"));
	
	// запуск автотестов
	СтатусВыполненияТестов = МенеджерТестирования.ВыполнитьВсеТесты(МенеджерТестирования);

	// генерация отчета
	МенеджерТестирования.СоздатьФайлыОтчетов(КаталогОтчетов);
	
	Если СтатусВыполненияТестов = СтатусТеста.Ошибка Тогда
		
		ОтправитьСобщение(Ответственные, "Ошибка", АдресЗадачи, ПутьКХранилищу);
		ВызватьИсключение "Автотестирование завершилось ошибкой. Подробности в отчете";
		
	Иначе
	
		АдресСборки = "";
		Если СохранятьУспешнуюСборку Тогда
	
			АдресСборки = МенеджерТестирования.СохранитьУспешнуюСборку(ПутьККаталогуСборок, НомерСборки);
			
		КонецЕсли;
		
		Если СтатусВыполненияТестов <> СтатусТеста.Успешно Тогда

			ОтправитьСобщение(Ответственные, СтатусВыполненияТестов, АдресЗадачи, ПутьКХранилищу, АдресСборки);

		КонецЕсли;
		
	КонецЕсли;
	
	Лог.Информация("Тестирование завершено");
	
КонецПроцедуры

Процедура ТестироватьЛокально(Знач ОписаниеПараметров)Экспорт

	Лог.Информация("Начинаю тестирование конфигурации из локального хранилища");
	
	ЛокальныйКаталогГит = ОписаниеПараметров["ЛокальныйКаталогГит"];	
	Если ЛокальныйКаталогГит = Неопределено Тогда
		
		ВызватьИсключение "Не указан локальный каталог Git.";
		
	КонецЕсли;
	
	КаталогОтчетов = ОписаниеПараметров["КаталогОтчетов"]; 
	Если ОписаниеПараметров["КаталогОтчетов"] = Неопределено Тогда
	
		ВызватьИсключение "Не указан каталог для сохранения отчетов";
	
	КонецЕсли;
	
	ПутьКХранилищу = ОписаниеПараметров["ПутьКХранилищу"]; 
	Если ОписаниеПараметров["ПутьКХранилищу"] = Неопределено Тогда
	
		ВызватьИсключение "Не указан путь к локальному хранилище";
	
	КонецЕсли;
	
	КонфигураторРепозитория = Новый КонфигураторРепозитория;
	КонфигурацияРепозитория = КонфигураторРепозитория.ПрочитатьКонфигурацию(ЛокальныйКаталогГит);
	
	ВерсияПлатформы = КонфигурацияРепозитория["Версия1СТестирование"];
	ВерсияПлатформыРаспаковки = КонфигурацияРепозитория["Версия1СРазбор"];
	Формат = КонфигурацияРепозитория["ФорматВыгрузки"];
	
	Лог.Отладка("Настройки локального тестирования --------------------------------");
	Лог.Отладка("ПутьКХранилищу = " + ПутьКХранилищу);
	Лог.Отладка("КаталогОтчетов = " + КаталогОтчетов);
	Лог.Отладка("ЛокальныйКаталогГит = " + ЛокальныйКаталогГит);	
	Лог.Отладка("------------------------------------------------------------------");
	
	КаталогИсходников = ВременныеФайлы.СоздатьКаталог();
	МенеджерТестирования = ПолучитьМенеджерТестирования(ВерсияПлатформы, ПутьКХранилищу, ЛокальныйКаталогГит, Неопределено, Неопределено, КаталогИсходников);
	МенеджерТестирования.СоздатьТестируемуюБазуДанных(МенеджерТестирования.РаспаковатьЛокальноеХранилище(Формат, ВерсияПлатформыРаспаковки));
	Лог.Отладка("Создали тестируемую базу");	
	
	МенеджерТестирования.ВыполнитьПервоначальнуюНастройку();
	Лог.Отладка("Выполнили первоначальное заполнение тестовой базы");	
	
	// загрузка внешних тестов
	МенеджерТестирования.ЗагрузитьТестыИзКаталога(МенеджерТестирования, ОбъединитьПути(ЛокальныйКаталогГит, "features"));
	
	// запуск автотестов
	СтатусВыполненияТестов = МенеджерТестирования.ВыполнитьВсеТесты(МенеджерТестирования);

	// генерация отчета
	МенеджерТестирования.СоздатьФайлыОтчетов(КаталогОтчетов, Истина);
	
	Если СтатусВыполненияТестов = СтатусТеста.Ошибка Тогда
		
		ВызватьИсключение "Автотестирование завершилось ошибкой. Подробности в отчете";
		
	КонецЕсли;
	
	ВременныеФайлы.УдалитьФайл(КаталогИсходников);
	
	Лог.Информация("Тестирование завершено");
	
КонецПроцедуры


Функция ПолучитьМенеджерТестирования(ВерсияПлатформы, ПутьКХранилищу, ЛокальныйКаталогГит, URLРепозитория, ИмяВетки, КаталогИсходников = Неопределено)

	МенеджерТестирования = Новый МенеджерТестирования();
	МенеджерТестирования.Инициализация(ВерсияПлатформы, ПутьКХранилищу, ЛокальныйКаталогГит, URLРепозитория, ИмяВетки, КаталогИсходников);
	
	Возврат МенеджерТестирования;

КонецФункции

Процедура ОтправитьСобщение(Ответственные, ТипСообщения, АдресЗадачи, ПутьКХранилищу, АдресСборки = "")
	
	Если Ответственные <> Неопределено Тогда
		
		Мессенджер = Новый Мессенджер();

		СтруктураИмениХранилища = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ПутьКХранилищу, "\");
		ИмяХранилища = СтруктураИмениХранилища[СтруктураИмениХранилища.Количество() - 2];
		
		ТемаСообщения = "Автотестирование хранилища " + ИмяХранилища; 
		Сообщение = "Автотестирование завершилось " + ?(ТипСообщения = "Ошибка", "с ошибками", "с предупреждениями") + Символы.ПС
				+ "Отчет о тестировании: " + АдресЗадачи + "allure/#/" 
				+ ?(Не ПустаяСтрока(АдресСборки), Символы.ПС + "Адрес сборки: " + АдресСборки, "");

		СообщениеSLACK = "Автотестирование завершилось " + ?(ТипСообщения = "Ошибка", "с ошибками", "с предупреждениями") + Символы.ПС
				+ "Отчет о тестировании: <" + АдресЗадачи + "allure/#/|"
				+ РаскодироватьСтроку(АдресЗадачи, СпособКодированияСтроки.КодировкаURL) + "allure/#/>" 
				+ ?(Не ПустаяСтрока(АдресСборки), Символы.ПС + "Адрес сборки: " + АдресСборки, "");

		Для Каждого Ответственный Из Ответственные Цикл
		
			Если Ответственный["Транспорт"] = "slack" Тогда

				Мессенджер.ОтправитьСообщение(Ответственный["Транспорт"], Ответственный["Контакт"], СообщениеSLACK, ТемаСообщения, ТипСообщения);

			Иначе

				Мессенджер.ОтправитьСообщение(Ответственный["Транспорт"], Ответственный["Контакт"], Сообщение, ТемаСообщения, ТипСообщения);

			КонецЕсли;
		
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Точка входа в приложение
///////////////////////////////////////////////////////////////////

Лог = Логирование.ПолучитьЛог("oscript.app.autotest");

Попытка
	
	Параметры = РазобратьАргументыКоманднойСтроки();
	Если Параметры <> Неопределено Тогда
	
		ВыполнитьОбработку(Параметры);
		
	Иначе
		
		ПоказатьИнформациюОПараметрахКоманднойСтроки();
		Лог.Ошибка("Указаны некорректные аргументы командной строки");
		ВременныеФайлы.Удалить();
		ЗавершитьРаботу(1);
		
	КонецЕсли;
	
	ВременныеФайлы.Удалить();
	Лог.Закрыть();
	
Исключение
	
	Лог.Ошибка(ОписаниеОшибки());
	ВременныеФайлы.Удалить();
	Лог.Закрыть();
	ЗавершитьРаботу(1);
	
КонецПопытки;

