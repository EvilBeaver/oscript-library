/////////////////////////////////////////////////////////////////////////
//
// OneScript Package Manager
// Модуль сборки архива пакета
//
/////////////////////////////////////////////////////////////////////////

#Использовать tempfiles

Перем РабочийКаталог;
Перем ВремКаталогСборки;

//////////////////////////////////////////////////////////
// Сборка пакета

Процедура СобратьПакет(Знач КаталогИсходников, Знач ФайлМанифеста, Знач ВыходнойКаталог) Экспорт

	РабочийКаталог = КаталогИсходников;
	
	Попытка
		
		Если ВыходнойКаталог = Неопределено Тогда
			ВыходнойКаталог = ТекущийКаталог();
		КонецЕсли;
		
		Сообщить("Начинаю сборку в каталоге " + РабочийКаталог);
		УстановитьТекущийКаталог(РабочийКаталог);
		УточнитьФайлМанифеста(ФайлМанифеста);
		Манифест = ПрочитатьМанифест(ФайлМанифеста);
		СобратьПакетВКаталогеСборки(Манифест, ВыходнойКаталог);
		
		Сообщить("Сборка пакета завершена");
		
	Исключение
		
		ВременныеФайлы.Удалить();
		ВызватьИсключение;
		
	КонецПопытки;

	ВременныеФайлы.Удалить();
	
КонецПроцедуры

Процедура УточнитьФайлМанифеста(ФайлМанифеста)
	
	Если ФайлМанифеста = Неопределено Тогда
		
		ФайлОбъект = Новый Файл(Константы.ИмяФайлаСпецификацииПакета);
		Если ФайлОбъект.Существует() и ФайлОбъект.ЭтоФайл() Тогда
			Сообщить("Найден файл манифеста");
			ФайлМанифеста = ФайлОбъект.ПолноеИмя;
		Иначе
			ВызватьИсключение "Не определен манифест пакета";
		КонецЕсли;
	Иначе
		Сообщить("Использую файл манифеста " + ФайлМанифеста);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьМанифест(Знач ФайлМанифеста)
	
	ОписаниеПакета = Новый ОписаниеПакета();
	Сообщить("Загружаю описание пакета...");
	ВнешнийКонтекст = Новый Структура("Описание", ОписаниеПакета);
	Манифест = ЗагрузитьСценарий(ФайлМанифеста, ВнешнийКонтекст);
	Сообщить("Описание пакета прочитано");
	
	Возврат ОписаниеПакета;
	
КонецФункции

Процедура СобратьПакетВКаталогеСборки(Знач Манифест, Знач ВыходнойКаталог)
	
	ВремКаталогСборки = ВременныеФайлы.СоздатьКаталог();
	
	СвойстваПакета = Манифест.Свойства();
	
	ИмяФайлаПакета = СтрШаблон("%1-%2.ospx", СвойстваПакета.Имя, СвойстваПакета.Версия);
	ФайлАрхива = Новый Файл(ОбъединитьПути(ВыходнойКаталог, ИмяФайлаПакета));
	Архив = Новый ЗаписьZIPФайла(ФайлАрхива.ПолноеИмя);
	
	ДобавитьОписаниеМетаданныхПакета(Архив, Манифест);
	ДобавитьФайлыПакета(Архив, Манифест);
	
	Архив.Записать();
	
КонецПроцедуры

Процедура ДобавитьОписаниеМетаданныхПакета(Знач Архив, Знач Манифест);
	
	ПутьМанифеста = ОбъединитьПути(ВремКаталогСборки, "opm-metadata.xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПутьМанифеста);
	
	Сериализатор = Новый СериализацияМетаданныхПакета();
	Сериализатор.ЗаписатьМетаданныеВXML(Запись, Манифест);
	
	Запись.Закрыть();
	
	Архив.Добавить(ПутьМанифеста);
	Сообщить("Записаны метаданные пакета");
	
КонецПроцедуры

Процедура ДобавитьОписаниеБиблиотеки(Знач Архив, Знач Манифест)
	
	Модули = Манифест.ВсеМодулиПакета();
	Если Модули.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить("Формирую определения модулей пакета (lib.config)");
	
	ПутьКонфигурацииПакета = ОбъединитьПути(ВремКаталогСборки, "lib.config");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПутьКонфигурацииПакета);
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("package-def");
	Запись.ЗаписатьСоответствиеПространстваИмен("", "http://oscript.io/schemas/lib-config/1.0");
	
	Для Каждого ОписаниеМодуля Из Модули Цикл
		Если ОписаниеМодуля.Тип = Манифест.ТипыМодулей.Класс Тогда
			Запись.ЗаписатьНачалоЭлемента("class");
		Иначе
			Запись.ЗаписатьНачалоЭлемента("module");
		КонецЕсли;
		
		ФайлМодуля = Новый Файл(ОписаниеМодуля.Файл);
		Если Не ФайлМодуля.Существует() Тогда
			Сообщить("ПРЕДУПРЕЖДЕНИЕ: Файл модуля " + ОписаниеМодуля.Файл + " не обнаружен.");
		КонецЕсли;
		
		Запись.ЗаписатьАтрибут("name", ОписаниеМодуля.Идентификатор);
		Запись.ЗаписатьАтрибут("file", ОписаниеМодуля.Файл);
		Запись.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	Запись.Закрыть();
	
	Архив.Добавить(ПутьКонфигурацииПакета);
	Сообщить("Записаны определения модулей пакета");
	
КонецПроцедуры

Процедура ДобавитьФайлыПакета(Знач Архив, Знач Манифест)
	
	ВключаемыеФайлы = Манифест.ВключаемыеФайлы();
	Если ВключаемыеФайлы.Количество() = 0 Тогда
		Сообщить("Не определены включаемые файлы");
		Возврат;
	КонецЕсли;
	
	ПутьАрхиваЦелевойСистемы = ОбъединитьПути(ВремКаталогСборки, "content.zip");
	АрхивЦелевойСистемы = Новый ЗаписьZIPФайла(ПутьАрхиваЦелевойСистемы);
	
	ДобавитьОписаниеБиблиотеки(АрхивЦелевойСистемы, Манифест);
	
	Для Каждого ВключаемыйФайл Из ВключаемыеФайлы Цикл
		Сообщить("Добавляем файл: " + ВключаемыйФайл);
		ПолныйПуть = Новый Файл(ВключаемыйФайл).ПолноеИмя;
		АрхивЦелевойСистемы.Добавить(ПолныйПуть, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	КонецЦикла;
	
	АрхивЦелевойСистемы.Записать();
	
	Архив.Добавить(ПутьАрхиваЦелевойСистемы, РежимСохраненияПутейZIP.НеСохранятьПути);
	
КонецПроцедуры

////////////////////////////////////////////////////////
// Подготовка пустого каталога под новый пакет

Процедура ПодготовитьКаталогПроекта(Знач ВыходнойКаталог) Экспорт
	
	Если ВыходнойКаталог = Неопределено Тогда
		ВыходнойКаталог = ТекущийКаталог();
	КонецЕсли;

	ВыходнойКаталог = Новый Файл(ВыходнойКаталог);
	
	ИмяПакета = ВыходнойКаталог.Имя;

	Если Не ВыходнойКаталог.Существует() Тогда
		Сообщить("Создаю каталог " + ИмяПакета);
		СоздатьКаталог(ВыходнойКаталог.ПолноеИмя);
	Иначе
		Содержимое = НайтиФайлы(ВыходнойКаталог.ПолноеИмя, ПолучитьМаскуВсеФайлы());
		Если Содержимое.Количество() Тогда
			ВызватьИсключение "Каталог проекта " + ВыходнойКаталог.ПолноеИмя + " уже содержит файлы!";
		КонецЕсли;
	КонецЕсли;
	
	СоздатьПодкаталог(ВыходнойКаталог.ПолноеИмя, "src");
	СоздатьПодкаталог(ВыходнойКаталог.ПолноеИмя, "tests");
	СоздатьПодкаталог(ВыходнойКаталог.ПолноеИмя, "docs");
	
	ЗаписатьЗаготовкуСкриптаУстановки(ВыходнойКаталог.ПолноеИмя);
	ЗаписатьЗаготовкуМанифестаБиблиотеки(ВыходнойКаталог.ПолноеИмя, ИмяПакета);

	Сообщить("Готово");
	
КонецПроцедуры

Процедура СоздатьПодкаталог(Знач База, Знач Имя)
	Сообщить("Создаю каталог " + Имя);
	СоздатьКаталог(ОбъединитьПути(База, Имя));
КонецПроцедуры

Процедура ЗаписатьЗаготовкуСкриптаУстановки(Знач Каталог)

	Сообщить("Создаю заготовку скрипта установки/удаления");

	ИмяФайла = ОбъединитьПути(Каталог, Константы.ИмяФайлаСкриптаУстановки);
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	ЗаписьТекста.ЗаписатьСтроку("///////////////////////////////////////////////////////////////////");
	ЗаписьТекста.ЗаписатьСтроку("// Сценарий установки и удаления пакета с клиентской машины        ");
	ЗаписьТекста.ЗаписатьСтроку("///////////////////////////////////////////////////////////////////
	|
	|");
	
	ЗаписьТекста.ЗаписатьСтроку("// Вызывается пакетным менеджером перед установкой пакета на клиентскую машину.");
	ЗаписьТекста.ЗаписатьСтроку("// ");
	ЗаписьТекста.ЗаписатьСтроку("// Параметры:");
	ЗаписьТекста.ЗаписатьСтроку("//   АрхивПакета - ЧтениеZipФайла. Открытый архив пакета.");
	ЗаписьТекста.ЗаписатьСтроку("//   КаталогУстановкиПакета - строка. Путь в который пакетный менеджер устанавливает текущий пакет.");
	ЗаписьТекста.ЗаписатьСтроку("// ");
	ЗаписьТекста.ЗаписатьСтроку("Процедура ПередУстановкой(Знач АрхивПакета, Знач КаталогУстановкиПакета, СтандартнаяОбработка) Экспорт");
	ЗаписьТекста.ЗаписатьСтроку("	// TODO: Реализуйте спец. логику установки, если требуется");
	ЗаписьТекста.ЗаписатьСтроку("КонецПроцедуры");
	ЗаписьТекста.ЗаписатьСтроку(Символы.ПС);
	
	ЗаписьТекста.ЗаписатьСтроку("// Вызывается пакетным менеджером после распаковки пакета на клиентскую машину.");
	ЗаписьТекста.ЗаписатьСтроку("// ");
	ЗаписьТекста.ЗаписатьСтроку("// Параметры:");
	ЗаписьТекста.ЗаписатьСтроку("//   КаталогУстановкиПакета - строка. Путь в который пакетный менеджер устанавливает текущий пакет.");
	ЗаписьТекста.ЗаписатьСтроку("// ");
	ЗаписьТекста.ЗаписатьСтроку("Процедура ПриУстановке(Знач КаталогУстановкиПакета, СтандартнаяОбработка) Экспорт");
	ЗаписьТекста.ЗаписатьСтроку("	// TODO: Реализуйте спец. логику установки, если требуется");
	ЗаписьТекста.ЗаписатьСтроку("КонецПроцедуры");
	ЗаписьТекста.ЗаписатьСтроку(Символы.ПС);
	
	ЗаписьТекста.ЗаписатьСтроку("// Вызывается пакетным менеджером при удалении пакета с клиентской машины.");
	ЗаписьТекста.ЗаписатьСтроку("// ");
	ЗаписьТекста.ЗаписатьСтроку("// Параметры:");
	ЗаписьТекста.ЗаписатьСтроку("//   КаталогУстановкиПакета - строка. Каталог в который установлен пакет.");
	ЗаписьТекста.ЗаписатьСтроку("// ");
	ЗаписьТекста.ЗаписатьСтроку("Процедура ПриУдалении(Знач КаталогУстановкиПакета) Экспорт");
	ЗаписьТекста.ЗаписатьСтроку("	// TODO: Реализуйте спец. логику удаления, если требуется");
	ЗаписьТекста.ЗаписатьСтроку("КонецПроцедуры");
	
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Процедура ЗаписатьЗаготовкуМанифестаБиблиотеки(Знач Каталог, Знач ИмяПакета)
	
	Сообщить("Создаю заготовку описания пакета");
	
	ЗаписьТекста = Новый ЗаписьТекста(ОбъединитьПути(Каталог, Константы.ИмяФайлаСпецификацииПакета));
	
	ЗаписьТекста.ЗаписатьСтроку("////////////////////////////////////////////////////////////");
	ЗаписьТекста.ЗаписатьСтроку("// Описание пакета для сборки и установки");
	ЗаписьТекста.ЗаписатьСтроку("// Полную документацию см. на hub.oscript.io/packaging");
	ЗаписьТекста.ЗаписатьСтроку("//");
	
	ЗаписьТекста.ЗаписатьСтроку("
	|	Описание.Имя("""+ИмяПакета+""")
	|			.Версия(""1.0.1"")
	|			.Автор("""")
	|			.АдресАвтора(""author@somemail.com"")
	|			.Описание(""Это очень хороший и нужный пакет программ"")
	|			.ВерсияСреды(""1.0.11"")
	|			.ВключитьФайл(""src"")
	|			.ВключитьФайл(""doc"")
	|			.ВключитьФайл(""tests"")
	|			.ВключитьФайл("""+Константы.ИмяФайлаСкриптаУстановки+""")
	|			//.ЗависитОт(""package1"", "">=2.0"")
	|			//.ЗависитОт(""package2"", "">=1.1"", ""<2.0"")
	|			//.ОпределяетКласс(""УправлениеВселенной"", ""src/universe-mngr.os"")
	|			//.ОпределяетМодуль(""ПолезныеФункции"", ""src/tools.os"")
	|			;");
	
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры
