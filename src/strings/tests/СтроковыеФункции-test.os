#Использовать asserts
#Использовать strings

// { интерфейс тестирования
Перем юТест;

Перем СтроковыеУтилиты;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	//НаборТестов.НачатьГруппу("Функции парсинга текста и подстановки параметров", Ложь);
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ВставитьПараметрыВСтроку"); //, , "Проверка работы функции ВставитьПараметрыВСтроку");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ИзвлечьТекстИзHTML"); //, , "Проверка работы функции ИзвлечьТекстИзHTML");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_НайтиСимволСКонца"); //, , "Проверка работы функции НайтиСимволСКонца");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтроку"); //, , "Проверка работы функции ПодставитьПараметрыВСтроку");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм"); //, , "Проверка работы функции ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуИзМассива"); //, , "Проверка работы функции ПодставитьПараметрыВСтрокуИзМассива");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПолучитьПараметрыИзСтроки"); //, , "Проверка работы функции ПолучитьПараметрыИзСтроки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивПодстрок"); //, , "Проверка работы функции РазложитьСтрокуВМассивПодстрок");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивСлов"); //, , "Проверка работы функции РазложитьСтрокуВМассивСлов");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_СтрокаИзМассиваПодстрок"); //, , "Проверка работы функции СтрокаИзМассиваПодстрок");
	
	//НаборТестов.НачатьГруппу("Функции преобразования текста и символов", Ложь);
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ДополнитьСтроку"); //, , "Проверка работы функции ДополнитьСтроку");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЗаменитьОдниСимволыДругими"); //, , "Проверка работы функции ЗаменитьОдниСимволыДругими");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВРимскуюНотацию"); //, , "Проверка работы функции ПреобразоватьЧислоВРимскуюНотацию");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВАрабскуюНотацию"); //, , "Проверка работы функции ПреобразоватьЧислоВАрабскуюНотацию");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_СократитьДвойныеКавычки"); //, , "Проверка работы функции СократитьДвойныеКавычки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_СтрокаВЧисло"); //, , "Проверка работы функции СтрокаВЧисло");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_СтрокаЛатиницей"); //, , "Проверка работы функции СтрокаЛатиницей");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_СформироватьСтрокуСимволов"); //, , "Проверка работы функции СформироватьСтрокуСимволов");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_УдалитьПовторяющиесяСимволы"); //, , "Проверка работы функции УдалитьПовторяющиесяСимволы");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_УдалитьПоследнийСимволВСтроке"); //, , "Проверка работы функции УдалитьПоследнийСимволВСтроке");
	//ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ФорматированнаяСтрока"); //, , "Проверка работы функции ФорматированнаяСтрока");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЧислоЦифрамиПредметИсчисленияПрописью"); //, , "Проверка работы функции ЧислоЦифрамиПредметИсчисленияПрописью");
	
	//НаборТестов.НачатьГруппу("Функции проверки на соответствие критериям", Ложь);
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ТолькоКириллицаВСтроке"); //, , "Проверка работы функции ТолькоКириллицаВСтроке");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ТолькоЛатиницаВСтроке"); //, , "Проверка работы функции ТолькоЛатиницаВСтроке");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ТолькоЦифрыВСтроке"); //, , "Проверка работы функции ТолькоЦифрыВСтроке");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЭтоРазделительСлов"); //, , "Проверка работы функции ЭтоРазделительСлов");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЭтоУникальныйИдентификатор"); //, , "Проверка работы функции ЭтоУникальныйИдентификатор");
	
	Возврат ВсеТесты;
КонецФункции

// } интерфейс тестирования


// { блок юнит-тестов - сами тесты

// { Тесты функций парсинга текста и подстановки параметров

Процедура ТестДолжен_ПроверитьРаботуФункции_ВставитьПараметрыВСтроку() Экспорт

	// Функция должна возвратить массив из 5 элементов, три из которых - пустые.
	РезультатПодстановки = СтроковыеУтилиты.ВставитьПараметрыВСтроку(
		"Здравствуй, [Имя] [Фамилия].", Новый Структура("Фамилия,Имя", "Пупкин", "Вася"));
	
	Ожидаем.Что(РезультатПодстановки).Равно("Здравствуй, Вася Пупкин.");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ИзвлечьТекстИзHTML() Экспорт

	// Результат должен быть очищен от тегов и возвращать неформатированный текст.
	ТекстHTML = 
	"<html>
	|	<body>
	|    	<script type=""text/javascript"">document.write('Hello, World!');</script>
	|		<div><b><u>Неформатированный текст.</u></b></div>
	|	</body>
	|</html>";
	
	РезультатИзвлечения = СтроковыеУтилиты.ИзвлечьТекстИзHTML(ТекстHTML);	
	Ожидаем.Что(РезультатИзвлечения).Равно("Неформатированный текст.");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_НайтиСимволСКонца() Экспорт

	СтрокаСимволов = "й1ц2_й1ц2";
	
	// Функция должна вернуть позицию символа в строке.
	ПозицияСимвола = СтроковыеУтилиты.НайтиСимволСКонца(СтрокаСимволов, "ц");	
	Ожидаем.Что(ПозицияСимвола).Равно(8);
	
	// Функция должна вернуть 0, если строка не позицию символа в строке.
	ПозицияСимвола = СтроковыеУтилиты.НайтиСимволСКонца(СтрокаСимволов, "я");	
	Ожидаем.Что(ПозицияСимвола).Равно(0);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтроку() Экспорт

	РезультатПодстановки = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 пошел в %2", "Вася", "Зоопарк");
	Ожидаем.Что(РезультатПодстановки).Равно("Вася пошел в Зоопарк");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм() Экспорт

	РезультатПодстановки = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 пошел в %2", "%username%", "Зоопарк");
	Ожидаем.Что(РезультатПодстановки).Равно("%username% пошел в Зоопарк");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуИзМассива() Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("Вася");
	МассивПараметров.Добавить("Зоопарк");

	РезультатПодстановки = СтроковыеУтилиты.ПодставитьПараметрыВСтрокуИзМассива("%1 пошел в %2", МассивПараметров);
	Ожидаем.Что(РезультатПодстановки).Равно("Вася пошел в Зоопарк");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПолучитьПараметрыИзСтроки() Экспорт

	ПроверяемыеПараметры = СтроковыеУтилиты.ПолучитьПараметрыИзСтроки("File=""c:\InfoBases\Trade""; Usr=""Director"";");
	Ожидаем.Что(ПроверяемыеПараметры).ИмеетТип("Структура")
		.Что(ПроверяемыеПараметры.Свойство("File")).ЭтоИстина()
		.Что(ПроверяемыеПараметры.File).Равно("c:\InfoBases\Trade");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивПодстрок() Экспорт

	// Функция должна вернуть массив из 5 элементов, три из которых - пустые.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",");
	Ожидаем.Что(МассивСтрок, "Утверждение 1").ИмеетТип("Массив").ИмеетДлину(5);
	
	// Функция должна вернуть массив из двух элементов.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина);
	Ожидаем.Что(МассивСтрок, "Утверждение 2").ИмеетТип("Массив").ИмеетДлину(2);
	
	// Функция должна вернуть пустой массив.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок("");
	Ожидаем.Что(МассивСтрок, "Утверждение 3").ИмеетТип("Массив").ИмеетДлину(0);
	
	// Функция должна вернуть массив с одним пустым элементом.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок("",, Ложь);
	Ожидаем.Что(МассивСтрок, "Утверждение 4").ИмеетТип("Массив").ИмеетДлину(1);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивСлов() Экспорт

	// Функция должна вернуть массив значений: "один", "два2_", "три".
	МассивСлов = СтроковыеУтилиты.РазложитьСтрокуВМассивСлов("один-@#два2_!три");
	Ожидаем.Что(МассивСлов, "Утверждение 1").ИмеетТип("Массив").ИмеетДлину(3);
	Ожидаем.Что(МассивСлов[0], "Утверждение 1, слово 1").Равно("один");
	Ожидаем.Что(МассивСлов[1], "Утверждение 1, слово 2").Равно("два2_");
	
	// Функция должна вернуть массив значений: "один-", "два2", "три".
	МассивСлов = СтроковыеУтилиты.РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_");
	Ожидаем.Что(МассивСлов, "Утверждение 2").ИмеетТип("Массив").ИмеетДлину(3);
	Ожидаем.Что(МассивСлов[0], "Утверждение 2, слово 1").Равно("один-");
	Ожидаем.Что(МассивСлов[1], "Утверждение 2, слово 2").Равно("два2");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_СтрокаИзМассиваПодстрок() Экспорт

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("Вася");
	МассивСтрок.Добавить("пошел в");
	МассивСтрок.Добавить("Зоопарк.");
	
	// Функция должна объединить строки из массива в строку с разделителями
	РезультатСоединения = СтроковыеУтилиты.СтрокаИзМассиваПодстрок(МассивСтрок, " ");
	Ожидаем.Что(РезультатСоединения).Равно("Вася пошел в Зоопарк.");
	
КонецПроцедуры

// } Тесты функций парсинга текста и подстановки параметров

// { Тесты функций преобразования текста и символов

Процедура ТестДолжен_ПроверитьРаботуФункции_ДополнитьСтроку() Экспорт
	
	// Функция должна дополнить строку до 10-ти символов. По умолчанию функция дополняет строку символами "0" (ноль) слева.
	РезультатДополнения = СтроковыеУтилиты.ДополнитьСтроку("1234", 10);
	Ожидаем.Что(РезультатДополнения).Равно("0000001234");
	
	// Функция должна дополнить строку до 10-ти символов, использую символ "#". Незначащие символы слева и справа удаляются.
	РезультатДополнения = СтроковыеУтилиты.ДополнитьСтроку(" 1234  ", 10, "#", "Справа");
	Ожидаем.Что(РезультатДополнения).Равно("1234######");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ЗаменитьОдниСимволыДругими() Экспорт
	
	// Функция должна выполнить замену одних символов в строке на другие.
	РезультатЗамены = СтроковыеУтилиты.ЗаменитьОдниСимволыДругими("ABC","ABCxyz", "АБВ");
	Ожидаем.Что(РезультатЗамены).Равно("АБВxyz");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВРимскуюНотацию() Экспорт
	
	// Функция должна выполнить преобразование арабского числа от 0 до 999 в римское.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВРимскуюНотацию(117, Ложь);
	Ожидаем.Что(РезультатПреобразования).Равно("CXVII");
	
	// То же самое но используя кириллицу.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВРимскуюНотацию(117);
	Ожидаем.Что(РезультатПреобразования).Равно("СХУ11");
	
	// Казус следующей проверки в том, что в римской системе счисления не было нуля.
	// Функция, в данном случае, возвращает пустую строку (по всей видимости, римскую).
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВРимскуюНотацию(0);
	Ожидаем.Что(РезультатПреобразования).Равно("");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВАрабскуюНотацию() Экспорт
	
	// Функция должна выполнить преобразование римского числа в арабское.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВАрабскуюНотацию("CXVII", Ложь);
	Ожидаем.Что(РезультатПреобразования).Равно(117);
	
	// То же самое но используя кириллицу.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВАрабскуюНотацию("СХУ11");
	Ожидаем.Что(РезультатПреобразования).Равно(117);
	
	// Казус следующей проверки в том, что в римской системе счисления не было нуля.
	// Функция, в данном случае, принимает пустую строку и возвращает арабский ноль.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВАрабскуюНотацию("");
	Ожидаем.Что(РезультатПреобразования).Равно(0);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_СократитьДвойныеКавычки() Экспорт
	
	РезультатЗамены = СтроковыеУтилиты.СократитьДвойныеКавычки("""АБВ""""");
	Ожидаем.Что(РезультатЗамены).Равно("АБВ");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_СтрокаВЧисло() Экспорт
	
	// Функция должна выполнить преобразование строки в число без вызова исключения.
	РезультатПреобразования = СтроковыеУтилиты.СтрокаВЧисло("- 123 456,789 ");
	Ожидаем.Что(РезультатПреобразования).Равно(-123456.789);
	
	// Функция должна выполнить преобразование строки в число без вызова исключения.
	РезультатПреобразования = СтроковыеУтилиты.СтрокаВЧисло("123а");
	Ожидаем.Что(РезультатПреобразования).Равно(Неопределено);	
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_СтрокаЛатиницей() Экспорт
	
	// Функция должна выполнить замену одних символов в строке на другие.
	РезультатЗамены = СтроковыеУтилиты.СтрокаЛатиницей("Съешь ещё этих мягких французских булок, да выпей же чаю.");
	Ожидаем.Что(РезультатЗамены).Равно("S""esh eshche etikh myagkikh frantsuzskikh bulok, da vypey zhe chayu.");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_СформироватьСтрокуСимволов() Экспорт
	
	Результат = СтроковыеУтилиты.СформироватьСтрокуСимволов("#", 5);
	Ожидаем.Что(Результат).Равно("#####");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_УдалитьПовторяющиесяСимволы() Экспорт
	
	// Функция должна удалить крайние повторяющиеся символы слева в строке.
	РезультатЗамены = СтроковыеУтилиты.УдалитьПовторяющиесяСимволы("...АБВ...", ".");
	Ожидаем.Что(РезультатЗамены).Равно("АБВ...");
	
	// Функция должна удалить крайние повторяющиеся символы справа в строке.
	РезультатЗамены = СтроковыеУтилиты.УдалитьПовторяющиесяСимволы("...АБВ...", ".", "Справа");
	Ожидаем.Что(РезультатЗамены).Равно("...АБВ");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_УдалитьПоследнийСимволВСтроке() Экспорт
	
	СтрокаДляЗамены = "Привет!!!";
	СтроковыеУтилиты.УдалитьПоследнийСимволВСтроке(СтрокаДляЗамены, 2);
	Ожидаем.Что(СтрокаДляЗамены).Равно("Привет!");
	
КонецПроцедуры

// Процедура ТестДолжен_ПроверитьРаботуФункции_ФорматированнаяСтрока() Экспорт
	
	// МассивСтроки = Новый Массив;
	// МассивСтроки.Добавить(Новый ФорматированнаяСтрока("1.1", Новый Шрифт(,,Истина)));
	// МассивСтроки.Добавить(". ");
	// МассивСтроки.Добавить(Новый ФорматированнаяСтрока("Обновите",,,, "Обновление"));
	// МассивСтроки.Добавить(" программу.");
	
	// РезультатПреобразования = СтроковыеУтилиты.ФорматированнаяСтрока("<b>1.1</b>. <a href = ""Обновление"">Обновите</a> программу.");
	// Ожидаем.Что(РезультатПреобразования).Равно(Новый ФорматированнаяСтрока(МассивСтроки));
	
// КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ЧислоЦифрамиПредметИсчисленияПрописью() Экспорт
	
	РезультатПреобразования = СтроковыеУтилиты.ЧислоЦифрамиПредметИсчисленияПрописью(21, "минуту,минуты,минут");
	Ожидаем.Что(РезультатПреобразования).Равно("21 минуту");
	
	РезультатПреобразования = СтроковыеУтилиты.ЧислоЦифрамиПредметИсчисленияПрописью(33, "минуту,минуты,минут");
	Ожидаем.Что(РезультатПреобразования).Равно("33 минуты");
	
	РезультатПреобразования = СтроковыеУтилиты.ЧислоЦифрамиПредметИсчисленияПрописью(45, "минуту,минуты,минут");
	Ожидаем.Что(РезультатПреобразования).Равно("45 минут");
	
КонецПроцедуры

// } Тесты функций преобразования текста и символов

// { Тесты функций проверки на соответствие критериям

Процедура ТестДолжен_ПроверитьРаботуФункции_ТолькоКириллицаВСтроке() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоКириллицаВСтроке("Съешь ещё этих мягких французских булок, да выпей же чаю.",, " ,.");
	Ожидаем.Что(РезультатПроверки, "В строке только кириллица.").ЭтоИстина();
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоКириллицаВСтроке("АБВ z эюя",, " ");
	Ожидаем.Что(РезультатПроверки, "В строке присутствует не кириллический символ").ЭтоЛожь();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ТолькоЛатиницаВСтроке() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоЛатиницаВСтроке("The quick brown fox jumps over the lazy dog.",, " .");
	Ожидаем.Что(РезультатПроверки, "В строке только латиница.").ЭтоИстина();
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоЛатиницаВСтроке("ABC я xyz",, " ");
	Ожидаем.Что(РезультатПроверки, "В строке присутствует не латинский символ").ЭтоЛожь();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ТолькоЦифрыВСтроке() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоЦифрыВСтроке("001 234", Ложь, Ложь);
	Ожидаем.Что(РезультатПроверки).ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ЭтоРазделительСлов() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола("5"));
	Ожидаем.Что(РезультатПроверки, "Проверка цифрового символа.").ЭтоЛожь();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола("d"));
	Ожидаем.Что(РезультатПроверки, "Проверка латинского символа.").ЭтоЛожь();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола("Ш"));
	Ожидаем.Что(РезультатПроверки, "Проверка кириллического символа.").ЭтоЛожь();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола(" "));
	Ожидаем.Что(РезультатПроверки, "Проверка символа пробел.").ЭтоИстина();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола(","));
	Ожидаем.Что(РезультатПроверки, "Проверка запятой символа.").ЭтоИстина();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола("$"), "$");
	Ожидаем.Что(РезультатПроверки, "Проверка собственного символа.").ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ЭтоУникальныйИдентификатор() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоУникальныйИдентификатор(Новый УникальныйИдентификатор);
	Ожидаем.Что(РезультатПроверки).ЭтоИстина();
	
КонецПроцедуры

// } Тесты функций проверки на соответствие критериям

// } блок юнит-тестов - сами тесты

СтроковыеУтилиты = СтроковыеФункции;